name: Update from upstream and Publish Firefox Extension

on:
  # 定时触发（每天检查一次）
  schedule:
    - cron: '0 0 * * *'
  # 手动触发
  workflow_dispatch:
  # 如果可以配置webhook，也可以在upstream仓库更新时触发

jobs:
  update-and-publish:
    runs-on: ubuntu-latest
    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 设置Git配置
      - name: Configure Git
        run: |
          git config user.name 'GitHub Actions'
          git config user.email 'actions@github.com'
          # 添加upstream远程仓库
          git remote add upstream https://github.com/siyuan-note/siyuan-chrome.git || true
          git fetch upstream

      # 保存当前版本号
      - name: Save current version
        id: current_version
        run: |
          # 从manifest.json提取版本号
          VERSION=$(grep -o '"version": "[^"]*"' manifest.json | cut -d '"' -f 4)
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "当前版本: $VERSION"

      # 拉取并合并upstream代码
      - name: Pull and merge from upstream
        run: |
          # 切换到main分支
          git checkout main
          # 拉取upstream代码
          git pull upstream main -X theirs --no-edit

      # 转换Chrome API为Firefox API
      - name: Convert Chrome API to Firefox API
        run: |
          # 执行类似我们脚本中的API转换逻辑
          find . -type f -name "*.js" -not -path "*/node_modules/*" -not -path "*/\.*" | while read file; do
            echo "处理文件: $file"
            # 替换chrome API为browser API
            sed -i 's/chrome\./browser\./g' "$file"
          done

      # 检查版本号是否变化
      - name: Check for version change
        id: version_check
        run: |
          # 从更新后的manifest.json提取版本号
          NEW_VERSION=$(grep -o '"version": "[^"]*"' manifest.json | cut -d '"' -f 4)
          echo "新的版本: $NEW_VERSION"
          
          # 比较版本号
          if [ "${{ steps.current_version.outputs.current_version }}" != "$NEW_VERSION" ]; then
            echo "版本已更新！"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "版本未变化。"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      # 提交并推送更改
      - name: Commit and push changes
        run: |
          # 添加更改
          git add .
          
          # 检查是否有更改
          if git diff --staged --quiet; then
            echo "没有任何更改需要提交。"
          else
            git commit -m "自动提交：从upstream拉取代码并转换chrome API为browser API"
            git push origin main
          fi

      # 版本变化时创建GitHub Issue作为通知
      - name: Create GitHub Issue for version update
        if: steps.version_check.outputs.version_changed == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `
            ## Firefox扩展更新通知
            
            **新版本**: ${{ steps.version_check.outputs.new_version }}
            **更新时间**: ${new Date().toISOString()}
            **更新内容**: 从upstream仓库拉取最新代码并转换为Firefox兼容格式
            
            ### 变更详情
            - 已从upstream仓库拉取最新代码
            - 已将Chrome API转换为Firefox API
            - 已提交并推送到main分支
            - 已打包并发布到Firefox Add-ons Store
            
            此Issue由GitHub Actions自动创建，用于通知您扩展版本已更新。
            `;
            
            // 创建新Issue
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Firefox扩展更新通知 - 版本 ${{ steps.version_check.outputs.new_version }}`,
              body: issueBody
            });
            
            // 可选：如果要避免重复通知，可以检查是否已有相同版本的Issue
            // 这里简化处理，直接创建新Issue

      # 安装Firefox扩展打包工具
      - name: Install web-ext
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          npm install --global web-ext

      # 打包Firefox扩展
      - name: Build Firefox extension
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          web-ext build --no-input
          echo "打包完成，扩展文件位于web-ext-artifacts/目录"

      # 发布到Firefox Add-ons Store
      - name: Publish to Firefox Add-ons
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          echo "将使用Mozilla Add-ons API发布扩展..."
          # 注意：需要设置Mozilla Add-ons API密钥和密码
          web-ext sign --api-key ${{ secrets.MOZILLA_API_KEY }} --api-secret ${{ secrets.MOZILLA_API_SECRET }}
        env:
          NODE_ENV: production